# docker-compose.yml
version: '3.8'

services:

  # Nginx Container
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8082:80"
    volumes:
      - ../backend:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - mysql
    networks:
      - laravel_network


  # MySQL Container
  mysql:
    image: mysql:8.0.13
    container_name: mysql
    restart: unless-stopped
    tty: true
    environment:
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./data/mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - laravel_network


  # PHP-FPM Container for Symfony
  php:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: php
    restart: unless-stopped
    volumes:
      - ../backend:/var/www/html
    networks:
      - laravel_network

  # phpMyAdmin Container
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: root
      UPLOAD_LIMIT: 20000M
    ports:
      - "8081:80"
    depends_on:
      - mysql
    networks:
      - laravel_network

  composer:
    image: composer:latest
    container_name: composer
    volumes:
      - ../backend:/var/www/html
    working_dir: /var/www/html
    networks:
      - laravel_network


  npm:
    image: node:latest
    container_name: npm
    volumes:
      - ../backend:/var/www/html
    working_dir: /var/www/html
    entrypoint: [ 'npm' ]
    networks:
      - laravel_network


  artisan:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: artisan
    volumes:
      - ../backend:/var/www/html
    depends_on:
      - mysql
    working_dir: /var/www/html
    entrypoint: [ '/var/www/html/artisan' ]
    networks:
      - laravel_network

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    volumes:
      - ./data/redis:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - laravel_network

  redis-commander:
    image: rediscommander/redis-commander
    container_name: redis-commander
    ports:
      - "8085:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - laravel_network

#  mongo:
#    image: mongo:latest  # Use the official MongoDB image
#    container_name: mongodb_container
#    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root  # Set the root username
#      MONGO_INITDB_ROOT_PASSWORD: password  # Set the root password
#    ports:
#      - "27017:27017"  # Map the MongoDB port to the host machine
#    volumes:
#      # Persist MongoDB data in a Docker volume
#      - ./data/mongo-data:/data/db
#    networks:
#      - laravel_network


volumes:
  db_data:
  data:
#  mongo-data:

networks:
  laravel_network:
    driver: bridge